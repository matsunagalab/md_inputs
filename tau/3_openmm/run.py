# This script was generated by OpenMM-Setup on 2023-07-23.

from openmm import *
from openmm.app import *
from openmm.unit import *

# Input Files

psf = CharmmPsfFile('../1_setup/5_ionize/ionized.psf')
pdb = PDBFile('../1_setup/5_ionize/ionized.pdb')
#crd = CharmmPdbFile('../1_setup/5_ionize/ionized.crd')
params = CharmmParameterSet('../toppar/top_all36_prot.rtf', '../toppar/par_all36m_prot.prm', '../toppar/toppar_water_ions.str')
#params = CharmmParameterSet('par_all36m_prot.prm')

# {-67.367 -55.45 -250.0} {67.701 56.818 33.927}
# 135.068   112.268   283.927
#psf.topology.setPeriodicBoxVectors(pdb.topology.getPeriodicBoxVectors())
psf.setBox(13.5068*nanometers, 11.2268*nanometers,  28.3927*nanometers)

# System Configuration

nonbondedMethod = PME
nonbondedCutoff = 1.0*nanometers
ewaldErrorTolerance = 0.0005
constraints = HBonds
rigidWater = True
constraintTolerance = 0.000001
hydrogenMass = 1.5*amu

# Integration Options

dt = 0.004*picoseconds
temperature = 300*kelvin
friction = 1.0/picosecond
pressure = 1.0*atmospheres
barostatInterval = 25

# Simulation Options

steps = 100000
equilibrationSteps = 10000
platform = Platform.getPlatformByName('CUDA')
platformProperties = {'Precision': 'mixed'}
dcdReporter = DCDReporter('run.dcd', 500)
dataReporter = StateDataReporter('run.log', 100, totalSteps=steps,
    step=True, time=True, speed=True, progress=True, elapsedTime=True,
    remainingTime=True, potentialEnergy=True, kineticEnergy=True, totalEnergy=True,
    temperature=True, volume=True, density=True, separator='\t')
checkpointReporter = CheckpointReporter('checkpoint.chk', 1000)

# Prepare the Simulation

print('Building system...')
topology = pdb.topology
positions = pdb.positions
system = psf.createSystem(params, nonbondedMethod=nonbondedMethod, nonbondedCutoff=nonbondedCutoff,
    constraints=constraints, rigidWater=rigidWater, ewaldErrorTolerance=ewaldErrorTolerance, hydrogenMass=hydrogenMass)
system.addForce(MonteCarloBarostat(pressure, temperature, barostatInterval))

# Positional restraints

restraint = openmm.CustomExternalForce('k*periodicdistance(x, y, z, x0, y0, z0)^2')
system.addForce(restraint)
#restraint.addGlobalParameter('k', 10.0*kilojoules_per_mole/(nanometers*nanometers))
restraint.addPerParticleParameter('k')
restraint.addPerParticleParameter('x0')
restraint.addPerParticleParameter('y0')
restraint.addPerParticleParameter('z0')
for atom in pdb.topology.atoms():
    if atom.name == 'CA':
        restraint.addParticle(atom.index, [100.0*kilojoules_per_mole/(nanometers*nanometers), 
              pdb.positions[atom.index][0], pdb.positions[atom.index][1], pdb.positions[atom.index][2]] )

# Create simulation object

integrator = LangevinMiddleIntegrator(temperature, friction, dt)
integrator.setConstraintTolerance(constraintTolerance)
simulation = Simulation(topology, system, integrator, platform, platformProperties)
simulation.context.setPositions(positions)

# Write XML serialized objects

with open("system.xml", mode="w") as file:
    file.write(XmlSerializer.serialize(system))
with open("integrator.xml", mode="w") as file:
    file.write(XmlSerializer.serialize(integrator))

# Minimize and Equilibrate

simulation.reporters.append(dcdReporter)
simulation.reporters.append(dataReporter)

print('Performing energy minimization...')
simulation.minimizeEnergy()
print('Equilibrating...')
simulation.context.setVelocitiesToTemperature(temperature)
simulation.step(equilibrationSteps)

# Simulate

print('Simulating...')
#simulation.reporters.append(dcdReporter)
#simulation.reporters.append(dataReporter)
#simulation.reporters.append(checkpointReporter)
simulation.currentStep = 0
simulation.step(steps)

# Write file with final simulation state

simulation.saveState("run.xml")
